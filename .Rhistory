?str
getwd()
data <- read.csv("./DataFiles/ss06hid.csv")
names(data)[123]
strsplit(names(data)[123], "wgtp")
gdpdata <- read.csv("./DataFiles/getdata-data-GDP.csv")
cleanedData <- gsub(",", gdpData[5:194,5])
cleanedData <- gsub(",", "", gdpData[5:194,5])
cleanedData <- gsub(",", "", gdpData[5:194,5])
cleanedData <- gsub(",", "", gdpdata[5:194,5])
cleanedData
class(cleanedData)
numData = as.numeric(cleanedData)
numData
mean(numData)
?grep
countryNames = gdpData[5:194,4]
countryNames = gdpdata[5:194,4]
head(countryNames)
countryNames
class(countryNames)
"S\xe3o Tom\xe9 and Principe"
grep("United", countryNames)
grep("^United", countryNames)
gdpData <- gdpdata
rm(gdpdata)
regexec("^United", countryNames)
length(countryNames)
regexec("^United", countryNames)
?regexec
regexec("^United", countryNames)
regexec("^United", as.character(countryNames))
regexec("^United", as.character(countryNames))
class(countryNames)
as.character(countryNames)
grep("United", as.character(countryNames))
regexec("United", as.character(countryNames))
grep("^United", countryNames)
length(grep("^United", countryNames))
gdpData <- read.csv("./DataFiles/gdp.csv")
newGdpData <- gdpData[6:194, c(1, 2, 4, 5)]
colnames(newGdpData) <- c("CountryCode", "Ranking", "Economy", "GDP")
rownames(newGdpData) <- NULL # renumbering
educationData <- read.csv("./DataFiles/edstats_country.csv")
names(educationData)
?merge
mergedData <- merge(newGdpData, educationData, by.x="CountryCode", by.y="CountryCode", all=TRUE)
head(mergedData)
class(mergedData)
names(mergedData)
names(mergedData)[13]
head(mergedData[13])
names(mergedData) <- tolower(names(mergedData))
a <- as.character(mergedData[,13])
length(grep("Fiscal year end: June", a))
amzn <- getSymbols("AMZN",auto.assign=FALSE)
library(quantmod)
get.package
?get.package
??package
?install.package
?install.packages
?install.packages(quantmod)
install.packages(quantmod)
install.package(quantmod)
install.package("quantmod")
install.packages("quantmod")
amzn <- getSymbols("AMZN",auto.assign=FALSE)
library(quantmod)
amzn <- getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn)
length(sampleTimes)
?index
index(amzn)
length(sampleTimes)
?year
year(sampleTimes)
length(sampleTimes)
bool1 <- year(sampleTimes) == 2012
??year
library(zoo)
sampleTimes <- index(amzn)
bool1 <- year(sampleTimes) == 2012
library(lubricate)
install.package("lubricate")
install.packages("lubricate")
bool1 <- year(sampleTimes) == 2012
bool1 <- year(sampleTimes) == 2012
?lubricate
??lubricate
install.packages("date")
bool1 <- year(sampleTimes) == 2012
library(date)
bool1 <- year(sampleTimes) == 2012
library(year)
library(date)
library(chron)
bool1 <- year(sampleTimes) == 2012
require(lubricate)
install.packages("lubricate")
length(grep("2012", sampleTimes))
bool2 <- weekdays(sampleTimes)=="Monday"
length(sampleTimes[bool1 & bool2]) # 47
length(sampleTimes[bool1 & bool2]) # 47
bool1 = (grep("2012", sampleTimes))
length(sampleTimes[bool1 & bool2]) # 47
bool1 = (grep("2012", sampleTimes))
# length(sampleTimes[bool1]) # 250
bool2 <- weekdays(sampleTimes)=="Monday"
length(sampleTimes[bool1])
# 250
bool2 <- weekdays(sampleTimes)=="Monday"
length(bool2)
length(sampleTimes[bool1 & bool2]) # 47
length(sampleTimes[bool1 && bool2]) # 47
length(sampleTimes[bool1 & bool2]) # 47
sampleTimes[bool1 & bool2]
length(bool2)
bool2
bool2 = (grep("Monday", sampleTimes))
bool2
bool1 = grep("2012", sampleTimes)
length(sampleTimes[bool1])
bool2 = grep("Monday", sampleTimes)
length(bool2)
install.packages("lubridate")
amzn <- getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn)
length(sampleTimes)
length(grep("2012", sampleTimes))
bool1 <- year(sampleTimes) == 2012     # getting error on function year()
library(lubridate)
bool1 <- year(sampleTimes) == 2012     # getting error on function year()
?days
month(sampleTimes)
month(sampleTimes) = 3
month(sampleTimes) == 3
bool2 <- weekdays(sampleTimes)=="Monday"
length(bool2)
length(sampleTimes[bool1 & bool2])
class(bool2)
length(bool2)
length(bool2)
length(bool1)
bool1 <- year(sampleTimes) == 2012     # getting error on function year()
length(bool1)
bool1
bool2 <- weekdays(sampleTimes)=="Monday"
length(bool2)
length(sampleTimes[bool1 & bool2])
install.packages("quantmod")
install.packages("quantmod")
library(quantmod)
install.packages("lubridate")
library(lubridate)
amzn <- getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn)
length(sampleTimes)
length(grep("2012", sampleTimes))
bool1 <- year(sampleTimes) == 2012
#  bool1 = grep("2012", sampleTimes)  # this also works
length(sampleTimes[bool1])
# 250
bool2 <- weekdays(sampleTimes)=="Monday"
length(bool2)
length(sampleTimes[bool1 & bool2])
rm(list = ls())
rm(list = ls())
rm(list<-ls())
rm(list = ls())
rm(list <- ls())
rm(list = ls())
?nmle
?library(nmle)
library(nmle)
package(nmle)
require(nmle)
library()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?trellis
??trellis
?par
?trellis.par.set
library(datasets); data(airquality)
library(ggplot2)
library()
# calculate the mean and median total number of steps taken per day
```{r, echo=FALSE, results="hide"}
mean(totalSteps)
median(totalSteps)
```
j <- 0.5
sprintf("number %d", j)
sprintf("number %f", j)
j <- integer(J)
j
j <- asinteger(j)
as.integer
?as.integer
as.integer(j)
j = 1.6
as.integer(j)
df$interval
rm(list=ls())
setwd("~/Coursera/DataScience/Reproducible_Research/RepData_PeerAssessment1")
df <- read.csv("activity.csv")
head(df)
df$interval
df$date <- as.Date(df$date)
df$interval <- as.factor(df$interval)
totalSteps <- tapply(df$steps, df$date, sum, na.rm=T)
totalSteps
missing_values <- is.na(df[, 1])
number_NA <- sum(missing_values)
# Total number of missing values
number_NA
five_Minute_Mean <- tapply(df$step, df$interval, mean, na.rm = TRUE)
df[missing_values, 1] <- five_Minute_Mean[df[missing_values, 3]%/%100 * 12 +
(df[missing_values, 3]%%100)/5 + 1]
head(five_minute_mean)
head(df)
avg_Steps <- tapply(df$step, df$interval, mean, na.rm = TRUE)
missing_values[220"240"]
missing_values[220:240]
missing_values
missing_values[320:400]
df[missing_values, 1] <- avg_Steps[df[missing_values, 3]%/%100 * 12 +
(df[missing_values, 3]%%100)/5 + 1]
class(missing_values)
avg_Steps <- tapply(df$step, df$interval, mean, na.rm = TRUE)
df[missing_Values, 1] <- avg_Steps[df[missing_Values, 3]%/%100 * 12 +
(df[missing_Values, 3]%%100)/5 + 1]
missing_Values <- is.na(df[, 1])
number_NA <- sum(missing_Values)
# Total number of missing values
number_NA
```
#### Total number of missing values are `r number_NA`
### Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
#### Fill the NAs with the mean for that 5-minute interval
```{r}
avg_Steps <- tapply(df$step, df$interval, mean, na.rm = TRUE)
df[missing_Values, 1] <- avg_Steps[df[missing_Values, 3]%/%100 * 12 +
(df[missing_Values, 3]%%100)/5 + 1]
class(avg_Steps)
max_Steps <- max(avg_Steps)
index <- match(max_Steps, avg_Steps)
max_Value <- avg_Steps[index]
max_Steps_Interval <- as.numeric(names(max_Value))
max_Steps_Interval
max_Steps_Interval
missing_Values <- is.na(df[, 1])
number_NA <- sum(missing_Values)
# Total number of missing values
number_NA
number_NA
avg_Steps <- tapply(df$step, df$interval, mean, na.rm = TRUE)
df[missing_Values, 1] <- avg_Steps[df[missing_Values, 3]%/%100 * 12 +
(df[missing_Values, 3]%%100)/5 + 1]
df[missing_Values, 3
]
df[missing_Values, 3]
class(df[missing_Values, 3])
rm(list=ls())
setwd("~/Coursera/DataScience/Reproducible_Research/RepData_PeerAssessment1")
df <- read.csv("activity.csv")
head(df)
class(df$interval)
df$interval <- as.integer(df$interval)
df$interval
avg_Steps <- tapply(df$step, df$interval, mean, na.rm = TRUE)
df[missing_Values, 1] <- avg_Steps[df[missing_Values, 3]%/%100 * 12 +
(df[missing_Values, 3]%%100)/5 + 1]
missing_Values <- is.na(df[, 1])
number_NA <- sum(missing_Values)
# Total number of missing values
number_NA
df$interval <- as.integer(df$interval)
avg_Steps <- tapply(df$step, df$interval, mean, na.rm = TRUE)
df[missing_Values, 1] <- avg_Steps[df[missing_Values, 3]%/%100 * 12 +
(df[missing_Values, 3]%%100)/5 + 1]
head(avg_Steps)
head(df)
df1 <- df
missing_Values1 <- is.na(df1[,1])
missing_Values1[300:320]
missing_Values1[3400:320]
number_NA1 <- sum(missing_Values1)
df1<- df
df1$interval <- as.integer(df1$interval)
avg_Steps <- tapply(df1$step, df1$interval, mean, na.rm = TRUE)
df1[missing_Values, 1] <- avg_Steps[df1[missing_Values, 3]%/%100 * 12 +
(df1[missing_Values, 3]%%100)/5 + 1]
head(avg_Steps)
day_sum1 <- tapply(df1$steps, df1$date, sum)
hist(day_sum1, breaks=10, main+"The histogram of the total number of steps taken each day with (NA filled")
day_sum1 <- tapply(df1$steps, df1$date, sum)
hist(day_sum1, breaks=10, main="The histogram of the total number of steps taken each day with (NA filled")
day_sum1 <- tapply(df1$steps, df1$date, sum)
hist(day_sum1, breaks=10, main="The histogram of the total number of steps taken each day with (NA filled")
day_sum1 <- tapply(df1$steps, df1$date, sum)
hist(day_sum1, breaks=10, main="The histogram of the total number of steps taken each day\n with (NA filled")
modmean <- mean(day_sum1)
modmedian <- median(day_sum1)
The modified mean is `r modmean`
The modified median is `r modmedian`
modmean <- mean(day_sum1)
modmedian <- median(day_sum1)
colors()
day_sum1 <- tapply(df1$steps, df1$date, sum)
hist(day_sum1, breaks=10, color="royalblue', main="Histogram of the total number of steps taken each day\n with (NA filled")
```
day_sum1 <- tapply(df1$steps, df1$date, sum)
hist(day_sum1, breaks=10, color="royalblue', main="Histogram of the total number of steps taken each day\n with (NA filled")
hist(day_sum1, breaks=10, colors="royalblue', main="Histogram of the total number of steps taken each day\n with (NA filled")
hist(day_sum1, breaks=10, colors="royalblue", main="Histogram of the total number of steps taken each day\n with (NA filled")
hist(day_sum1, breaks=10, color="royalblue", main="Histogram of the total number of steps taken each day\n with (NA filled")
day_sum1 <- tapply(df1$steps, df1$date, sum)
day_sum1 <- tapply(df1$steps, df1$date, sum)
hist(day_sum1, breaks=10, color="royalblue", main="Histogram of the total number of steps taken each day\n with (NA filled")
hist(day_sum1, breaks=10, col="royalblue", main="Histogram of the total number of steps taken each day\n with (NA filled")
day_sum1 <- tapply(df1$steps, df1$date, sum)
hist(day_sum1, breaks=10, col="royalblue", main="Histogram of the total number of steps taken each day\n with (NA filled")
names(df)
df_new <- df
df_new$weekdays <- weekdays(as.Date(as.character(df_new$date)))
df_new
head(df_new)
df[300:350]
df[300:350,]
df_new[300:350,]
df_new[200:350,]
df_new[500:650,]
df_New <- df
df_New$days <- weekdays(as.Date(as.character(df_New$date)))
weekends <- df_new$days == "Saturday" | df_new$days == "Sunday"
# Assign Saturday and Sunday as weekends
df_New$Days[weekends] <- "weekend"
df_New$days[weekends] <- "weekend"
# Assign Monday to Friday as weekdays
df_New$Days[!weekends] <- "weekday"
df_New$days[!weekends] <- "weekday"
df_New[1000:1200]
df_New
df_New$days
weekends
class(df_New$days)
df_New$days
df_New <- df
df_New$days <- weekdays(as.Date(as.character(df_New$date)))
d <- df_new$days == "Saturday" | df_new$days == "Sunday"
df1$Days <- weekdays(as.Date(as.character(df1$date)))
# Create a logical vector d where Days are Saturday or Sunday
d <- df1$Days == "Saturday" | df1$Days == "Sunday"
# Call Saturday and Sunday Weekend
df1$Days[d] = "Weekend"
# Call weekdays (Monday through Friday) Weekdays
df1$Days[!d] = "Weekday"
df1
# Weekdays
df1_WD <- df1[df1$Days == "Weekday", ]
# Weekend
df1_WE <- df1[df1$Days == "Weekend", ]
df1_WD
df1_WE
IntervalWD <- as.numeric(levels(as.factor(df1_WD$interval)))
# Convert levels of interval into numeric for the weekend
IntervalWE <- as.numeric(levels(as.factor(df1_WE$interval)))
# Average number of steps during weekdays
avgWD <- tapply(df1_WD$steps, df1_WD$interval, mean)
# Average number of steps during the weekend
avgWE <- tapply(df1_WE$steps, df1_WE$interval, mean)
# Data frame combining average number of steps and interval during weekdays
dfWD <- data.frame(avgWD, IntervalWD)
# Data frame combining average number of steps and interval during the
# weekend
dfWE <- data.frame(avgWE, IntervalWE)
# Convert Days into factor activityCopy$Days <- as.factor(activityCopy$Days)
# Extract weekdays
df1$Days <- weekdays(as.Date(as.character(df1$date)))
# Create a logical vector d where Days are Saturday or Sunday
d <- df1$Days == "Saturday" | df1$Days == "Sunday"
# Call Saturday and Sunday Weekend
df1$Days[d] = "Weekend"
# Call weekdays (Monday through Friday) Weekdays
df1$Days[!d] = "Weekday"
# Weekdays
df1WD <- df1[df1$Days == "Weekday", ]
# Weekend
df1WE <- df1[df1$Days == "Weekend", ]
# Convert levels of interval into numeric for weekdays
IntervalWD <- as.numeric(levels(as.factor(df1WD$interval)))
# Convert levels of interval into numeric for the weekend
IntervalWE <- as.numeric(levels(as.factor(df1WE$interval)))
# Average number of steps during weekdays
avgWD <- tapply(df1WD$steps, df1WD$interval, mean)
# Average number of steps during the weekend
avgWE <- tapply(df1WE$steps, df1WE$interval, mean)
# Data frame combining average number of steps and interval during weekdays
dfWD <- data.frame(avgWD, IntervalWD)
# Data frame combining average number of steps and interval during weekends
dfWE <- data.frame(avgWE, IntervalWE)
# Add a column to the data frames that include weekdays and weekend days
df1WD$wDays <- rep("Weekday", nrow(dfWD))
df1WE$wDays <- rep("Weekend", nrow(dfWD))
# Rename column names to match
colnames(dfWD) <- c("Steps", "Interval", "wDays")
colnames(dfWE) <- c("Steps", "Interval", "wDays")
# rbind the dataframes
df <- rbind(dfWD, dfWE)
# Convert wDays column into a factor
df$wDays <- factor(df$wDays)
# Using ggplot2 package
g <- ggplot(df, aes(Interval, Steps, fill = wDays, colour = wDays))
g + geom_line() + labs(colour = "") +
ggtitle("Comparison of the Average Number of Steps\n between Weekdays and Weekend") +
ylab("Average Number of Steps")
dfWD <- data.frame(avgWD, IntervalWD)
# Data frame combining average number of steps and interval during weekends
dfWE <- data.frame(avgWE, IntervalWE)
df1WD$wDays <- rep("Weekday", nrow(dfWD))
df1WE$wDays <- rep("Weekend", nrow(dfWD))
# Rename column names to match
colnames(dfWD) <- c("Steps", "Interval", "wDays")
names(dfWD)
names(df1WD)
colnames(df)
colnames(dfWD)
dfWD
head(dfWD)
df1WD$wDays <- rep("Weekday", nrow(dfWD))
df1WE$wDays <- rep("Weekend", nrow(dfWD))
names(df1WD)
head(dfWD)
dfWD$wDays <- rep("Weekday", nrow(dfWD))
dfWE$wDays <- rep("Weekend", nrow(dfWD))
# Rename column names to match
colnames(dfWD) <- c("Steps", "Interval", "wDays")
colnames(dfWE) <- c("Steps", "Interval", "wDays")
# rbind the dataframes
df <- rbind(dfWD, dfWE)
# Convert wDays column into a factor
df$wDays <- factor(df$wDays)
# Using ggplot2 package
g <- ggplot(df, aes(Interval, Steps, fill = wDays, colour = wDays))
library(ggplot2)
g <- ggplot(df, aes(Interval, Steps, fill = wDays, colour = wDays))
g + geom_line() + labs(colour = "") +
ggtitle("Comparison of the Average Number of Steps\n between Weekdays and Weekend") +
ylab("Average Number of Steps")
library(ggplot2)
g <- ggplot(df, aes(Interval, Steps, fill = wDays, colour = wDays, base_size = 10))
g + geom_line() + labs(colour = "") +
ggtitle("Comparison of the Average Number of Steps\n between Weekdays and Weekend") +
ylab("Average Number of Steps")
g <- ggplot(df, aes(Interval, Steps, fill = wDays, colour = wDays, base_size = 20))
g + geom_line() + labs(colour = "") +
ggtitle("Comparison of the Average Number of Steps\n between Weekdays and Weekend") +
ylab("Average Number of Steps")
g <- ggplot(df, aes(Interval, Steps, fill = wDays, colour = wDays, size = 20))
g + geom_line() + labs(colour = "") +
ggtitle("Comparison of the Average Number of Steps\n between Weekdays and Weekend") +
ylab("Average Number of Steps")
g <- ggplot(df, aes(Interval, Steps, fill = wDays, colour = wDays, size = 10))
g + geom_line() + labs(colour = "") +
ggtitle("Comparison of the Average Number of Steps\n between Weekdays and Weekend") +
ylab("Average Number of Steps")
g <- ggplot(df, aes(Interval, Steps, fill = wDays, colour = wDays, size = 4))
g + geom_line() + labs(colour = "") +
ggtitle("Comparison of the Average Number of Steps\n between Weekdays and Weekend") +
ylab("Average Number of Steps")
?ggplot2
g <- ggplot(df, aes(Interval, Steps, fill = wDays, colour = wDays,))
g + geom_line() + labs(colour = "") + geom_point(size = 4) +
ggtitle("Comparison of the Average Number of Steps\n between Weekdays and Weekend") +
ylab("Average Number of Steps")
library(ggplot2)
df <- data.frame(x=1:10, y=1:10)
ggplot(df, aes(x,y)) + geom_point() +
opts(axis.title.x = theme_text(size = 14, hjust = 0.5, vjust = -5))
df <- data.frame(x=1:10, y=1:10)
ggplot(df, aes(x,y)) + geom_point() +
opts(axis.title.x = theme(size = 14, hjust = 0.5, vjust = -5))
dev.new(width=5, height=5)
g <- ggplot(df, aes(Interval, Steps, fill = wDays, colour = wDays,))
g + geom_line() + labs(colour = "") +
ggtitle("Comparison of the Average Number of Steps\n between Weekdays and Weekend") +
ylab("Average Number of Steps")
dfWD$wDays <- rep("Weekday", nrow(dfWD))
dfWE$wDays <- rep("Weekend", nrow(dfWD))
# Rename column names to match
colnames(dfWD) <- c("Steps", "Interval", "wDays")
colnames(dfWE) <- c("Steps", "Interval", "wDays")
# rbind the dataframes
df <- rbind(dfWD, dfWE)
# Convert wDays column into a factor
df$wDays <- factor(df$wDays)
# Using ggplot2 package
library(ggplot2)
dev.new(width=5, height=5)
dev(width=5, height=5)
width=5
height=5
g <- ggplot(df, aes(Interval, Steps, fill = wDays, colour = wDays))
g + geom_line() + labs(colour = "") +
ggtitle("Comparison of the Average Number of Steps\n between Weekdays and Weekend") +
ylab("Average Number of Steps")
?html
?htm
?html
